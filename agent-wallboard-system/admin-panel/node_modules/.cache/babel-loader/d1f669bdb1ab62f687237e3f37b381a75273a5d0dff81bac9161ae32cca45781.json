{"ast":null,"code":"// services/authAPI.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n/**\n * Authentication API Service\n * à¹ƒà¸«à¹‰à¸„à¸£à¸š 100%\n */\nexport const authAPI = {\n  /**\n   * Login without password\n   * @param {string} username - User username\n   * @returns {Promise<Object>} Login result with token\n   */\n  login: async username => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n      }\n      return data;\n    } catch (error) {\n      // ðŸ†• Better error handling\n      if (error.message === 'Failed to fetch') {\n        throw new Error('Network error. Please check your internet connection.');\n      }\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  /**\n   * Logout\n   */\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  /**\n   * Get current user from localStorage\n   */\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n  /**\n   * Check if user is logged in\n   */\n  isLoggedIn: () => {\n    return localStorage.getItem('token') !== null;\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","authAPI","login","username","response","fetch","method","headers","body","JSON","stringify","data","json","ok","Error","message","token","localStorage","setItem","user","error","console","logout","removeItem","getCurrentUser","userStr","getItem","parse","isLoggedIn"],"sources":["/home/panuwat/class/engse203/engse203-backend-teams/agent-wallboard-system/admin-panel/src/services/authAPI.js"],"sourcesContent":["// services/authAPI.js\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3001/api';\n\n/**\n * Authentication API Service\n * à¹ƒà¸«à¹‰à¸„à¸£à¸š 100%\n */\nexport const authAPI = {\n  /**\n   * Login without password\n   * @param {string} username - User username\n   * @returns {Promise<Object>} Login result with token\n   */\n  login: async (username) => {\n    try {\n      const response = await fetch(`${API_BASE_URL}/auth/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({ username })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n\n      // Store token in localStorage\n      if (data.token) {\n        localStorage.setItem('token', data.token);\n        localStorage.setItem('user', JSON.stringify(data.user));\n      }\n\n      return data;\n    } catch (error) {\n      // ðŸ†• Better error handling\n      if (error.message === 'Failed to fetch') {\n        throw new Error('Network error. Please check your internet connection.');\n      }\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Logout\n   */\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n\n  /**\n   * Get current user from localStorage\n   */\n  getCurrentUser: () => {\n    const userStr = localStorage.getItem('user');\n    return userStr ? JSON.parse(userStr) : null;\n  },\n\n  /**\n   * Check if user is logged in\n   */\n  isLoggedIn: () => {\n    return localStorage.getItem('token') !== null;\n  }\n};"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;;AAEjF;AACA;AACA;AACA;AACA,OAAO,MAAMC,OAAO,GAAG;EACrB;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAE,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,aAAa,EAAE;QACzDS,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEP;QAAS,CAAC;MACnC,CAAC,CAAC;MAEF,MAAMQ,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MAElC,IAAI,CAACR,QAAQ,CAACS,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,cAAc,CAAC;MACjD;;MAEA;MACA,IAAIJ,IAAI,CAACK,KAAK,EAAE;QACdC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEP,IAAI,CAACK,KAAK,CAAC;QACzCC,YAAY,CAACC,OAAO,CAAC,MAAM,EAAET,IAAI,CAACC,SAAS,CAACC,IAAI,CAACQ,IAAI,CAAC,CAAC;MACzD;MAEA,OAAOR,IAAI;IACb,CAAC,CAAC,OAAOS,KAAK,EAAE;MACd;MACA,IAAIA,KAAK,CAACL,OAAO,KAAK,iBAAiB,EAAE;QACvC,MAAM,IAAID,KAAK,CAAC,uDAAuD,CAAC;MAC1E;MACAO,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACEE,MAAM,EAAEA,CAAA,KAAM;IACZL,YAAY,CAACM,UAAU,CAAC,OAAO,CAAC;IAChCN,YAAY,CAACM,UAAU,CAAC,MAAM,CAAC;EACjC,CAAC;EAED;AACF;AACA;EACEC,cAAc,EAAEA,CAAA,KAAM;IACpB,MAAMC,OAAO,GAAGR,YAAY,CAACS,OAAO,CAAC,MAAM,CAAC;IAC5C,OAAOD,OAAO,GAAGhB,IAAI,CAACkB,KAAK,CAACF,OAAO,CAAC,GAAG,IAAI;EAC7C,CAAC;EAED;AACF;AACA;EACEG,UAAU,EAAEA,CAAA,KAAM;IAChB,OAAOX,YAAY,CAACS,OAAO,CAAC,OAAO,CAAC,KAAK,IAAI;EAC/C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}